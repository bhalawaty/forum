<?php

namespace Tests\Feature;

use App\Activity;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;
use App\Thread;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ThreadTest extends TestCase
{
    use DatabaseMigrations;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = create('App\Thread');
    }

    /** @test */
    public function A_user_can_view_all_threads()
    {
        $this->get('/threads')
            ->assertSee($this->thread->title);
    }

    /** @test */
    public function A_user_can_view_single_thread()
    {
        $this->get($this->thread->path())
            ->assertSee($this->thread->title);
    }


    /** @test */
    public function a_unauthorized_can_not_delete_threads()
    {
        $this->expectException('Illuminate\Auth\AuthenticationException');
        $thread = create('App\Thread');

        $this->delete($thread->path())->assertRedirect('/login');
        $this->signIn();
        $this->delete($thread->path())->assertRedirect('/login');
    }

    /** @test */
    public function a_auth_user_can_delete_threads()
    {
        $this->signIn();
        $thread = create('App\Thread', ['user_id' => auth()->id()]);
        $reply = create('App\Reply', ['thread_id' => $thread->id]);


        $response = $this->delete($thread->path());

        $this->assertDatabaseMissing('threads', ['id' => $thread->id]);
        $this->assertDatabaseMissing('replies', ['id' => $reply->id]);
        $this->assertEquals(0, Activity::count());
    }

    /** @test */
    public function a_user_can_see_all_replies_associated_with_thread()
    {

        $reply = create('App\Reply', ['thread_id' => $this->thread->id]);

        $this->get($this->thread->path())
            ->assertSee($reply->body);


    }

    /** @test */
    public function a_thread_associated_with_channel()
    {
        $channel = create('App\Channel');
        $threadwithchannel = create('App\Thread', ['channel_id' => $channel->id]);
        $threadwithoutchannel = create('App\Thread');

        $this->get('/threads/' . $channel->slug)
            ->assertSee($threadwithchannel->title)
            ->assertDontSee($threadwithoutchannel->title);
    }

    /** @test */
    public function a_user_can_filter_thread_by_user_name()
    {
        $this->signIn(create('App\User', ['name' => 'bilalhalawaty']));

        $threadbybilal = create('App\Thread', ['user_id' => auth()->id()]);
        $threadbyoneelse = create('App\Thread');

        $this->get('threads?by=bilalhalawaty')
            ->assertSee($threadbybilal->title)
            ->assertDontSee($threadbyoneelse->title);


    }

    /** @test */
    public function a_user_can_filter_thread_by_popularity()
    {


        $threadWithTwoReplies = create('App\Thread');
        create('App\Reply', ['thread_id' => $threadWithTwoReplies->id], 2);

        $threadWithNoReplies = $this->thread;

        $threadWithThreeReplies = create('App\Thread');
        create('App\Reply', ['thread_id' => $threadWithThreeReplies->id], 3);


        $response = $this->get('threads?popular=1');

        $threadsFromResponse = $response->original->getData()['threads'];

        $repliesCount = $threadsFromResponse->pluck('replies_count');

        $this->assertEquals([3, 2, 0], $repliesCount->toArray());


    }

    /** @test */
    public function a_user_can_filter_thread_by_un_popularity()
    {


        $thread = create('App\Thread');
        create('App\Reply', ['thread_id' => $thread->id]);

        $response = $this->get('threads?unpopular=1');

        $threadsFromResponse = $response->original->getData()['threads'];

        $repliesCount = $threadsFromResponse->pluck('replies_count');

        $this->assertCount(1, $repliesCount);


    }

}
